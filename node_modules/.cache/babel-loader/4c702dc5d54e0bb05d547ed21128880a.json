{"ast":null,"code":"var _jsxFileName = \"/Users/keeratgrewal/Desktop/ProductivityApp/src/App.js\";\nimport React from \"react\";\nimport \"./App.css\"; //import 'bootstrap/dist/css/bootstrap.min.css';\n\nimport Navigation from \"./components/layout/Navigation\";\nimport FriendsBar from \"./components/layout/FriendsBar\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport Login from \"./components/auth/Login\";\nimport Register from \"./components/auth/Register\";\nimport { getFirebase } from \"react-redux-firebase\";\n\nfunction App() {\n  /* this is where we initial friends for user based from database for the logged in user*/\n  console.log(\"HEREadsfasfadsfadsfadsfasd\");\n  const firebase = getFirebase().database();\n  const firestore = firebase.firestore();\n  const uid = firebase.auth().currentUser.uid;\n  const usersRef = firestore.collection('users'); // Get a reference to the Users collection;\n\n  const onlineRef = firebase.ref('.info/connected'); // Get a reference to the list of connections\n\n  onlineRef.on('value', snapshot => {\n    firestore.ref(`/status/${uid}`).onDisconnect() // Set up the disconnect hook\n    .set('offline') // The value to be set for this key when the client disconnects\n    .then(() => {\n      // Set the Firestore User's online status to true\n      usersRef.doc(userId).set({\n        online: true\n      }, {\n        merge: true\n      }); // Let's also create a key in our real-time database\n      // The value is set to 'online'\n\n      oldRealTimeDb.ref(`/status/${userId}`).set('online');\n    });\n  });\n  return /*#__PURE__*/React.createElement(BrowserRouter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Navigation, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Switch, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/\",\n    component: FriendsBar,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    path: \"/login\",\n    component: Login,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    path: \"/register\",\n    component: Register,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 11\n    }\n  }))));\n} // import { import } from '@babel/types';\n\n\nexport default App;","map":{"version":3,"sources":["/Users/keeratgrewal/Desktop/ProductivityApp/src/App.js"],"names":["React","Navigation","FriendsBar","BrowserRouter","Switch","Route","Login","Register","getFirebase","App","console","log","firebase","database","firestore","uid","auth","currentUser","usersRef","collection","onlineRef","ref","on","snapshot","onDisconnect","set","then","doc","userId","online","merge","oldRealTimeDb"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP,C,CACA;;AACA,OAAOC,UAAP,MAAuB,gCAAvB;AACA,OAAOC,UAAP,MAAuB,gCAAvB;AACA,SAASC,aAAT,EAAwBC,MAAxB,EAAgCC,KAAhC,QAA6C,kBAA7C;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,SAASC,WAAT,QAA4B,sBAA5B;;AAEA,SAASC,GAAT,GAAe;AACb;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AACA,QAAMC,QAAQ,GAAGJ,WAAW,GAAGK,QAAd,EAAjB;AACA,QAAMC,SAAS,GAAGF,QAAQ,CAACE,SAAT,EAAlB;AACA,QAAMC,GAAG,GAAGH,QAAQ,CAACI,IAAT,GAAgBC,WAAhB,CAA4BF,GAAxC;AACA,QAAMG,QAAQ,GAAGJ,SAAS,CAACK,UAAV,CAAqB,OAArB,CAAjB,CANa,CAMmC;;AAChD,QAAMC,SAAS,GAAGR,QAAQ,CAACS,GAAT,CAAa,iBAAb,CAAlB,CAPa,CAOsC;;AAEnDD,EAAAA,SAAS,CAACE,EAAV,CAAa,OAAb,EAAsBC,QAAQ,IAAI;AAEhCT,IAAAA,SAAS,CACNO,GADH,CACQ,WAAUN,GAAI,EADtB,EAEGS,YAFH,GAEkB;AAFlB,KAGGC,GAHH,CAGO,SAHP,EAGkB;AAHlB,KAIGC,IAJH,CAIQ,MAAM;AACR;AACAR,MAAAA,QAAQ,CACLS,GADH,CACOC,MADP,EAEGH,GAFH,CAEO;AACHI,QAAAA,MAAM,EAAE;AADL,OAFP,EAIK;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAJL,EAFQ,CAQR;AACA;;AACAC,MAAAA,aAAa,CAACV,GAAd,CAAmB,WAAUO,MAAO,EAApC,EAAuCH,GAAvC,CAA2C,QAA3C;AACH,KAfH;AAiBD,GAnBD;AAqBA,sBACE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,KAAD;AAAO,IAAA,KAAK,MAAZ;AAAa,IAAA,IAAI,EAAC,GAAlB;AAAsB,IAAA,SAAS,EAAEvB,UAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,QAAZ;AAAqB,IAAA,SAAS,EAAEI,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAGE,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,WAAZ;AAAwB,IAAA,SAAS,EAAEC,QAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,CAFF,CADF,CADF;AAYD,C,CACD;;;AAEA,eAAeE,GAAf","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n//import 'bootstrap/dist/css/bootstrap.min.css';\nimport Navigation from \"./components/layout/Navigation\";\nimport FriendsBar from \"./components/layout/FriendsBar\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport Login from \"./components/auth/Login\";\nimport Register from \"./components/auth/Register\";\nimport { getFirebase } from \"react-redux-firebase\";\n\nfunction App() {\n  /* this is where we initial friends for user based from database for the logged in user*/\n  console.log(\"HEREadsfasfadsfadsfadsfasd\")\n  const firebase = getFirebase().database();\n  const firestore = firebase.firestore();\n  const uid = firebase.auth().currentUser.uid;\n  const usersRef = firestore.collection('users'); // Get a reference to the Users collection;\n  const onlineRef = firebase.ref('.info/connected'); // Get a reference to the list of connections\n\n  onlineRef.on('value', snapshot => {\n  \n    firestore\n      .ref(`/status/${uid}`)\n      .onDisconnect() // Set up the disconnect hook\n      .set('offline') // The value to be set for this key when the client disconnects\n      .then(() => {\n          // Set the Firestore User's online status to true\n          usersRef\n            .doc(userId)\n            .set({\n              online: true,\n            }, { merge: true});  \n  \n          // Let's also create a key in our real-time database\n          // The value is set to 'online'\n          oldRealTimeDb.ref(`/status/${userId}`).set('online');\n      });\n    \n  });\n\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        <Navigation />\n        <Switch>\n          <Route exact path=\"/\" component={FriendsBar} />\n          <Route path=\"/login\" component={Login} />\n          <Route path=\"/register\" component={Register} />\n        </Switch>\n      </div>\n    </BrowserRouter>\n  );\n}\n// import { import } from '@babel/types';\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}