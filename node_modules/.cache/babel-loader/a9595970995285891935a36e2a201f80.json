{"ast":null,"code":"export const login = creds => {\n  return (dispatch, getState, {\n    getFirebase\n  }) => {\n    const firebase = getFirebase();\n    firebase.auth().signInWithEmailAndPassword(creds.email, creds.password).then(resp => {\n      let userStatusDatabaseRef = fire.database().ref('status/');\n      let isOfflineForDatabase = {\n        state: 'offline',\n        last_changed: fire.database.ServerValue.TIMESTAMP\n      };\n      var isOnlineForDatabase = {\n        state: 'online',\n        last_changed: fire.database.ServerValue.TIMESTAMP\n      };\n      fire.database().ref('.info/connected').on('value', function (snapshot) {\n        // If we're not currently connected, don't do anything.\n        if (snapshot.val() == false) {\n          return;\n        }\n\n        ; // If we are currently connected, then use the 'onDisconnect()' \n        // method to add a set which will only trigger once this \n        // client has disconnected by closing the app, \n        // losing internet, or any other means.\n\n        userStatusDatabaseRef.onDisconnect().set(isOfflineForDatabase).then(function () {\n          userStatusDatabaseRef.set(isOnlineForDatabase);\n        });\n      });\n    }).then(() => {\n      dispatch({\n        type: 'LOGIN_SUCCESS'\n      });\n    }).catch(error => {\n      dispatch({\n        type: 'LOGIN_FAILED',\n        error\n      });\n    });\n  };\n};\nexport const logout = () => {\n  return (dispatch, getState, {\n    getFirebase\n  }) => {\n    const firebase = getFirebase();\n    firebase.auth().signOut().then(() => {\n      dispatch({\n        type: \"LOGOUT_SUCCESS\"\n      });\n    });\n  };\n};\nexport const register = fields => {\n  return (dispatch, getState, {\n    getFirebase,\n    getFirestore\n  }) => {\n    const firebase = getFirebase();\n    const firestore = getFirestore();\n    firebase.auth().createUserWithEmailAndPassword(fields.email, fields.password).then(resp => {\n      firestore.collection('users').doc(resp.user.uid).set({\n        firstname: fields.firstname,\n        lastname: fields.lastname,\n        username: fields.username,\n        uid: resp.user.uid\n      });\n      firebase.database().ref('status/' + resp.user.uid).set({\n        firstname: fields.firstname,\n        lastname: fields.lastname,\n        username: fields.username,\n        uid: resp.user.uid\n      });\n    }).then(() => {\n      dispatch({\n        type: 'USER_CREATED'\n      });\n    }).catch(error => {\n      dispatch({\n        type: 'USER_CREATION_FAILED',\n        error\n      });\n    });\n  };\n}; // const isLoggedIn = (uid) => {\n//     return (dispatch, getState, {getFirebase, getFirestore}) => {\n//         // here is the async call to firebase\n//         const firebase = getFirebase();\n//         firebase.auth().add({\n//            name: friend\n//         }).then(() => {\n//             dispatch({type: 'ADD_FRIEND', friend});\n//         }).catch((error) => {\n//             dispatch({type: 'ADD_FRIEND_ERROR', error});\n//         })\n//     }\n// }","map":{"version":3,"sources":["/Users/keeratgrewal/Desktop/ProductivityApp/src/store/actions/authActions.js"],"names":["login","creds","dispatch","getState","getFirebase","firebase","auth","signInWithEmailAndPassword","email","password","then","resp","userStatusDatabaseRef","fire","database","ref","isOfflineForDatabase","state","last_changed","ServerValue","TIMESTAMP","isOnlineForDatabase","on","snapshot","val","onDisconnect","set","type","catch","error","logout","signOut","register","fields","getFirestore","firestore","createUserWithEmailAndPassword","collection","doc","user","uid","firstname","lastname","username"],"mappings":"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","sourcesContent":["export const login = (creds) => {\n    return (dispatch, getState, {getFirebase}) => {\n        const firebase = getFirebase();\n        firebase.auth().signInWithEmailAndPassword(\n            creds.email,\n            creds.password\n        ).then((resp) => {\n            let userStatusDatabaseRef = fire.database().ref('status/');\n            let isOfflineForDatabase = {\n                state: 'offline',\n                last_changed: fire.database.ServerValue.TIMESTAMP,\n            };\n            \n            var isOnlineForDatabase = {\n                state: 'online',\n                last_changed: fire.database.ServerValue.TIMESTAMP,\n            };\n            fire.database().ref('.info/connected').on('value', function(snapshot) {\n                // If we're not currently connected, don't do anything.\n                if (snapshot.val() == false) {\n                    return;\n                };\n            \n                // If we are currently connected, then use the 'onDisconnect()' \n                // method to add a set which will only trigger once this \n                // client has disconnected by closing the app, \n                // losing internet, or any other means.\n                userStatusDatabaseRef.onDisconnect().set(isOfflineForDatabase).then(function() {\n                    userStatusDatabaseRef.set(isOnlineForDatabase);\n                });\n            });\n        }).then(() => {\n            dispatch({type: 'LOGIN_SUCCESS'})\n        }).catch((error) => {\n            dispatch({type: 'LOGIN_FAILED', error})\n        })\n    }\n}\n\nexport const logout = () => {\n    return (dispatch, getState, {getFirebase}) => {\n        const firebase = getFirebase();\n        firebase.auth().signOut().then(() => {\n            dispatch({type: \"LOGOUT_SUCCESS\"})\n        })\n    }\n}\n\nexport const register = (fields) => {\n    return (dispatch, getState, {getFirebase, getFirestore}) => {\n        const firebase = getFirebase();\n        const firestore = getFirestore();\n        firebase.auth().createUserWithEmailAndPassword(\n            fields.email,\n            fields.password\n        ).then((resp) => {\n            firestore.collection('users').doc(resp.user.uid).set({\n                firstname: fields.firstname,\n                lastname: fields.lastname,\n                username: fields.username,\n                uid: resp.user.uid\n            })\n            firebase.database().ref('status/' + resp.user.uid).set({\n                firstname: fields.firstname,\n                lastname: fields.lastname,\n                username: fields.username,\n                uid: resp.user.uid\n            });\n        }).then(() => {\n            dispatch({type: 'USER_CREATED'})\n        }).catch(error => {\n            dispatch({type: 'USER_CREATION_FAILED', error})\n        })\n    }\n}\n\n// const isLoggedIn = (uid) => {\n//     return (dispatch, getState, {getFirebase, getFirestore}) => {\n//         // here is the async call to firebase\n//         const firebase = getFirebase();\n//         firebase.auth().add({\n//            name: friend\n//         }).then(() => {\n//             dispatch({type: 'ADD_FRIEND', friend});\n//         }).catch((error) => {\n//             dispatch({type: 'ADD_FRIEND_ERROR', error});\n//         })\n//     }\n// }\n\n"]},"metadata":{},"sourceType":"module"}