{"ast":null,"code":"export const login = creds => {\n  return (dispatch, getState, {\n    getFirebase\n  }) => {\n    const firebase = getFirebase();\n    firebase.auth().signInWithEmailAndPassword(creds.email, creds.password).then(resp => {\n      var userStatusDatabaseRef = firebase.database().ref('status/' + resp.user.uid);\n      var isOfflineForDatabase = {\n        state: 'offline',\n        last_changed: firebase.database.ServerValue.TIMESTAMP\n      };\n      var isOnlineForDatabase = {\n        state: 'online',\n        last_changed: firebase.database.ServerValue.TIMESTAMP\n      }; // firebase.database().ref('.info/connected').on('value', function(snapshot) {\n      //     // If we're not currently connected, don't do anything.\n      //     if (snapshot.val() == false) {\n      //         return;\n      //     };\n      //     userStatusDatabaseRef.onDisconnect().set(isOfflineForDatabase).then(function() {\n      //         userStatusDatabaseRef.set(isOnlineForDatabase);\n      //     });\n      // });\n    }).then(() => {\n      dispatch({\n        type: 'LOGIN_SUCCESS'\n      });\n    }).catch(error => {\n      dispatch({\n        type: 'LOGIN_FAILED',\n        error\n      });\n    });\n  };\n};\nexport const logout = () => {\n  return (dispatch, getState, {\n    getFirebase\n  }) => {\n    const firebase = getFirebase();\n    firebase.auth().signOut().then(() => {\n      dispatch({\n        type: \"LOGOUT_SUCCESS\"\n      });\n    });\n  };\n};\nexport const register = fields => {\n  return (dispatch, getState, {\n    getFirebase,\n    getFirestore\n  }) => {\n    const firebase = getFirebase();\n    const firestore = getFirestore();\n    firebase.auth().createUserWithEmailAndPassword(fields.email, fields.password).then(resp => {\n      firestore.collection('users').doc(resp.user.uid).set({\n        firstname: fields.firstname,\n        lastname: fields.lastname,\n        username: fields.username,\n        uid: resp.user.uid\n      });\n      firebase.database().ref('status/' + resp.user.uid).set({\n        firstname: fields.firstname,\n        lastname: fields.lastname,\n        username: fields.username,\n        uid: resp.user.uid\n      });\n    }).then(() => {\n      dispatch({\n        type: 'USER_CREATED'\n      });\n    }).catch(error => {\n      dispatch({\n        type: 'USER_CREATION_FAILED',\n        error\n      });\n    });\n  };\n}; // const isLoggedIn = (uid) => {\n//     return (dispatch, getState, {getFirebase, getFirestore}) => {\n//         // here is the async call to firebase\n//         const firebase = getFirebase();\n//         firebase.auth().add({\n//            name: friend\n//         }).then(() => {\n//             dispatch({type: 'ADD_FRIEND', friend});\n//         }).catch((error) => {\n//             dispatch({type: 'ADD_FRIEND_ERROR', error});\n//         })\n//     }\n// }","map":{"version":3,"sources":["/Users/keeratgrewal/Desktop/ProductivityApp/src/store/actions/authActions.js"],"names":["login","creds","dispatch","getState","getFirebase","firebase","auth","signInWithEmailAndPassword","email","password","then","resp","userStatusDatabaseRef","database","ref","user","uid","isOfflineForDatabase","state","last_changed","ServerValue","TIMESTAMP","isOnlineForDatabase","type","catch","error","logout","signOut","register","fields","getFirestore","firestore","createUserWithEmailAndPassword","collection","doc","set","firstname","lastname","username"],"mappings":"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","sourcesContent":["export const login = (creds) => {\n    return (dispatch, getState, {getFirebase}) => {\n        const firebase = getFirebase();\n        firebase.auth().signInWithEmailAndPassword(\n            creds.email,\n            creds.password\n        ).then((resp) => {\n            var userStatusDatabaseRef = firebase.database().ref('status/' + resp.user.uid);\n            var isOfflineForDatabase = {\n                state: 'offline',\n                last_changed: firebase.database.ServerValue.TIMESTAMP,\n            };\n            \n            var isOnlineForDatabase = {\n                state: 'online',\n                last_changed: firebase.database.ServerValue.TIMESTAMP,\n            };\n            // firebase.database().ref('.info/connected').on('value', function(snapshot) {\n            //     // If we're not currently connected, don't do anything.\n            //     if (snapshot.val() == false) {\n            //         return;\n            //     };\n        \n            //     userStatusDatabaseRef.onDisconnect().set(isOfflineForDatabase).then(function() {\n            //         userStatusDatabaseRef.set(isOnlineForDatabase);\n            //     });\n            // });\n            \n        }).then(() => {\n            dispatch({type: 'LOGIN_SUCCESS'})\n        }).catch((error) => {\n            dispatch({type: 'LOGIN_FAILED', error})\n        })\n    }\n}\n\nexport const logout = () => {\n    return (dispatch, getState, {getFirebase}) => {\n        const firebase = getFirebase();\n        firebase.auth().signOut().then(() => {\n            dispatch({type: \"LOGOUT_SUCCESS\"})\n        })\n    }\n}\n\nexport const register = (fields) => {\n    return (dispatch, getState, {getFirebase, getFirestore}) => {\n        const firebase = getFirebase();\n        const firestore = getFirestore();\n        firebase.auth().createUserWithEmailAndPassword(\n            fields.email,\n            fields.password\n        ).then((resp) => {\n            firestore.collection('users').doc(resp.user.uid).set({\n                firstname: fields.firstname,\n                lastname: fields.lastname,\n                username: fields.username,\n                uid: resp.user.uid\n            })\n            firebase.database().ref('status/' + resp.user.uid).set({\n                firstname: fields.firstname,\n                lastname: fields.lastname,\n                username: fields.username,\n                uid: resp.user.uid\n            });\n        }).then(() => {\n            dispatch({type: 'USER_CREATED'})\n        }).catch(error => {\n            dispatch({type: 'USER_CREATION_FAILED', error})\n        })\n    }\n}\n\n// const isLoggedIn = (uid) => {\n//     return (dispatch, getState, {getFirebase, getFirestore}) => {\n//         // here is the async call to firebase\n//         const firebase = getFirebase();\n//         firebase.auth().add({\n//            name: friend\n//         }).then(() => {\n//             dispatch({type: 'ADD_FRIEND', friend});\n//         }).catch((error) => {\n//             dispatch({type: 'ADD_FRIEND_ERROR', error});\n//         })\n//     }\n// }\n\n"]},"metadata":{},"sourceType":"module"}