{"ast":null,"code":"var _jsxFileName = \"/Users/keeratgrewal/Desktop/ProductivityApp/src/App.js\";\nimport React from \"react\";\nimport \"./App.css\"; //import 'bootstrap/dist/css/bootstrap.min.css';\n\nimport Navigation from \"./components/layout/Navigation\";\nimport FriendsBar from \"./components/layout/FriendsBar\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport Login from \"./components/auth/Login\";\nimport Register from \"./components/auth/Register\";\nimport { getFirebase } from \"react-redux-firebase\";\nimport { connect } from \"react-redux\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    /* this is where we initial friends for user based from database for the logged in user*/\n    if (this.props.auth.uid) {\n      console.log(\"HEREadsfasfadsfadsfadsfasd\");\n      const firebase = getFirebase().database();\n      const firestore = getFirebase().firestore();\n      const uid = getFirebase().auth().currentUser.uid;\n      const usersRef = firestore.collection('users'); // Get a reference to the Users collection;\n\n      const onlineRef = firebase.ref('.info/connected'); // Get a reference to the list of connections\n\n      onlineRef.on('value', snapshot => {\n        firebase.ref(`/status/${uid}`).onDisconnect() // Set up the disconnect hook\n        .set('offline') // The value to be set for this key when the client disconnects\n        .then(() => {\n          // Set the Firestore User's online status to true\n          usersRef.doc(uid).set({\n            online: true\n          }, {\n            merge: true\n          }); // Let's also create a key in our real-time database\n          // The value is set to 'online'\n\n          firebase.ref(`/status/${uid}`).set('online');\n        });\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(BrowserRouter, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Navigation, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Switch, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: \"/\",\n      component: FriendsBar,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/login\",\n      component: Login,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/register\",\n      component: Register,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }\n    }))));\n  }\n\n} // import { import } from '@babel/types';\n\n\nconst addAppToProps = state => {\n  return {\n    auth: state.firebase.auth\n  };\n};\n\nexport default connect(addAppToProps)(App);","map":{"version":3,"sources":["/Users/keeratgrewal/Desktop/ProductivityApp/src/App.js"],"names":["React","Navigation","FriendsBar","BrowserRouter","Switch","Route","Login","Register","getFirebase","connect","App","Component","constructor","props","render","auth","uid","console","log","firebase","database","firestore","currentUser","usersRef","collection","onlineRef","ref","on","snapshot","onDisconnect","set","then","doc","online","merge","addAppToProps","state"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n//import 'bootstrap/dist/css/bootstrap.min.css';\nimport Navigation from \"./components/layout/Navigation\";\nimport FriendsBar from \"./components/layout/FriendsBar\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport Login from \"./components/auth/Login\";\nimport Register from \"./components/auth/Register\";\nimport { getFirebase } from \"react-redux-firebase\";\nimport { connect } from \"react-redux\";\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    render(){\n  /* this is where we initial friends for user based from database for the logged in user*/\n    if (this.props.auth.uid) {\n        console.log(\"HEREadsfasfadsfadsfadsfasd\")\n        const firebase = getFirebase().database();\n        const firestore = getFirebase().firestore();\n        const uid = getFirebase().auth().currentUser.uid;\n        const usersRef = firestore.collection('users'); // Get a reference to the Users collection;\n        const onlineRef = firebase.ref('.info/connected'); // Get a reference to the list of connections\n\n        onlineRef.on('value', snapshot => {\n        \n          firebase\n            .ref(`/status/${uid}`)\n            .onDisconnect() // Set up the disconnect hook\n            .set('offline') // The value to be set for this key when the client disconnects\n            .then(() => {\n                // Set the Firestore User's online status to true\n                usersRef\n                  .doc(uid)\n                  .set({\n                    online: true,\n                  }, { merge: true});  \n        \n                // Let's also create a key in our real-time database\n                // The value is set to 'online'\n                firebase.ref(`/status/${uid}`).set('online');\n            });\n          \n        });\n    }\n   \n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n          <Navigation />\n          <Switch>\n            <Route exact path=\"/\" component={FriendsBar} />\n            <Route path=\"/login\" component={Login} />\n            <Route path=\"/register\" component={Register} />\n          </Switch>\n        </div>\n      </BrowserRouter>\n    );\n}\n}\n// import { import } from '@babel/types';\n\nconst addAppToProps = (state) => {\n  return {\n    auth: state.firebase.auth,\n  };\n};\n\nexport default connect(addAppToProps)(App)\n"]},"metadata":{},"sourceType":"module"}