{"ast":null,"code":"export const login = creds => {\n  return (dispatch, getState, {\n    getFirebase\n  }) => {\n    const firebase = getFirebase();\n    firebase.auth().signInWithEmailAndPassword(creds.email, creds.password).then(() => {\n      dispatch({\n        type: 'LOGIN_SUCCESS'\n      });\n    }).catch(error => {\n      dispatch({\n        type: 'LOGIN_FAILED',\n        error\n      });\n    });\n  };\n};\nexport const logout = uid => {\n  return (dispatch, getState, {\n    getFirebase\n  }) => {\n    const firebase = getFirebase();\n    const currUser = firebase.auth().currentUser;\n    var isOfflineForDatabase = {\n      state: 'offline',\n      last_changed: getFirebase().database.ServerValue.TIMESTAMP\n    };\n    firebase.auth().signOut().then(() => {\n      console.log(\"CHANGED STAUS\", uid);\n      firebase.database().ref('status/' + uid).set(isOfflineForDatabase);\n    }).then(() => {\n      dispatch({\n        type: \"LOGOUT_SUCCESS\"\n      });\n    });\n  };\n};\nexport const register = fields => {\n  return (dispatch, getState, {\n    getFirebase,\n    getFirestore\n  }) => {\n    const firebase = getFirebase();\n    const firestore = getFirestore();\n    firebase.auth().createUserWithEmailAndPassword(fields.email, fields.password).then(resp => {\n      firestore.collection('users').doc(resp.user.uid).set({\n        firstname: fields.firstname,\n        lastname: fields.lastname,\n        username: fields.username,\n        uid: resp.user.uid\n      }); // firebase.database().ref('status/' + resp.user.uid).set({\n      //     firstname: fields.firstname,\n      //     lastname: fields.lastname,\n      //     username: fields.username,\n      //     uid: resp.user.uid,\n      //     state: 'online',\n      //     last_changed: null\n      // });\n    }).then(() => {\n      dispatch({\n        type: 'USER_CREATED'\n      });\n    }).catch(error => {\n      dispatch({\n        type: 'USER_CREATION_FAILED',\n        error\n      });\n    });\n  };\n};\nexport const isLoggedIn = uid => {\n  return (dispatch, getState, {\n    getFirebase,\n    getFirestore\n  }) => {\n    // here is the async call to firebase\n    const firestore = getFirestore();\n    const usersRef = firestore.collection('users').doc(uid);\n    usersRef.get().then(resp => {\n      if (resp.data().online) {\n        dispatch({\n          type: 'online'\n        });\n      } else {\n        dispatch({\n          type: 'offline'\n        });\n      } // dispatch({type:resp.data().online})\n\n    });\n  };\n};","map":{"version":3,"sources":["/Users/keeratgrewal/Desktop/ProductivityApp/src/store/actions/authActions.js"],"names":["login","creds","dispatch","getState","getFirebase","firebase","auth","signInWithEmailAndPassword","email","password","then","type","catch","error","logout","uid","currUser","currentUser","isOfflineForDatabase","state","last_changed","database","ServerValue","TIMESTAMP","signOut","console","log","ref","set","register","fields","getFirestore","firestore","createUserWithEmailAndPassword","resp","collection","doc","user","firstname","lastname","username","isLoggedIn","usersRef","get","data","online"],"mappings":"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","sourcesContent":["export const login = (creds) => {\n    return (dispatch, getState, {getFirebase}) => {\n        const firebase = getFirebase();\n        firebase.auth().signInWithEmailAndPassword(\n            creds.email,\n            creds.password\n        ).then(() => {\n            dispatch({type: 'LOGIN_SUCCESS'})\n        }).catch((error) => {\n            dispatch({type: 'LOGIN_FAILED', error})\n        })\n    }\n}\n\nexport const logout = (uid) => {\n    return (dispatch, getState, {getFirebase}) => {\n        const firebase = getFirebase();\n        const currUser = firebase.auth().currentUser\n        var isOfflineForDatabase = {\n            state: 'offline',\n            last_changed: getFirebase().database.ServerValue.TIMESTAMP,\n          };\n        firebase.auth().signOut(\n        ).then(() => {\n            console.log(\"CHANGED STAUS\", uid)\n            firebase.database().ref('status/' + uid).set(isOfflineForDatabase)\n        }).then(() => {\n            dispatch({type: \"LOGOUT_SUCCESS\"})\n        })\n    }\n}\n\nexport const register = (fields) => {\n    return (dispatch, getState, {getFirebase, getFirestore}) => {\n        const firebase = getFirebase();\n        const firestore = getFirestore();\n        firebase.auth().createUserWithEmailAndPassword(\n            fields.email,\n            fields.password\n        ).then((resp) => {\n            firestore.collection('users').doc(resp.user.uid).set({\n                firstname: fields.firstname,\n                lastname: fields.lastname,\n                username: fields.username,\n                uid: resp.user.uid,\n            })\n            // firebase.database().ref('status/' + resp.user.uid).set({\n            //     firstname: fields.firstname,\n            //     lastname: fields.lastname,\n            //     username: fields.username,\n            //     uid: resp.user.uid,\n            //     state: 'online',\n            //     last_changed: null\n            // });\n        }).then(() => {\n            dispatch({type: 'USER_CREATED'})\n        }).catch(error => {\n            dispatch({type: 'USER_CREATION_FAILED', error})\n        })\n    }\n}\n\nexport const isLoggedIn = (uid) => {\n    return (dispatch, getState, {getFirebase, getFirestore}) => {\n        // here is the async call to firebase\n        const firestore = getFirestore();\n        const usersRef = firestore.collection('users').doc(uid);\n        usersRef.get(            \n        ).then((resp) => {\n            if(resp.data().online){\n                dispatch({type: 'online'})\n            }\n            else{\n                dispatch({type: 'offline'})\n\n            }\n            // dispatch({type:resp.data().online})\n        })\n        \n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}