{"ast":null,"code":"var _jsxFileName = \"/Users/keeratgrewal/Desktop/ProductivityApp/src/components/layout/Content.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { Line, Bar, Doughnut } from \"react-chartjs-2\";\nimport \"../../styles/content.css\";\nimport { Tab, Container, Row, Col, Nav, ToggleButtonGroup, ToggleButton } from \"react-bootstrap\";\nimport { Component } from \"react\";\nimport { throwStatement } from \"@babel/types\";\n\nclass Content extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      charData: {},\n      currGraph: \"line\"\n    };\n    this.setKey = this.setKey.bind(this);\n  }\n\n  componentDidMount() {\n    // if (this.props.greeting === \"line\") {\n    //   this.setState({ charData: setChartDataLine });\n    // } else {\n    //   this.setState({ charData: setChartDataOther });\n    // }\n    this.setState({\n      currGraph: \"line\"\n    });\n  }\n\n  renderSomething(randomArg) {\n    if (randomArg === \"line\") {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"LineGraph\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Line, {\n        data: this.state.charData,\n        options: charDataOptions,\n        width: 160,\n        height: 40,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 13\n        }\n      }));\n    } else if (randomArg === \"doughnut\") {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"LineGraph\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Doughnut, {\n        data: this.state.charData,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 12\n        }\n      }));\n    } else {}\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 12\n      }\n    }, /*#__PURE__*/React.createElement(Bar, {\n      data: this.state.charData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 18\n      }\n    }));\n  }\n\n  setKey(k) {\n    if (k === \"line\") {\n      this.setState({\n        charData: setChartDataLine,\n        currGraph: \"line\"\n      });\n    } else if (k == \"otherline\") {\n      this.setState({\n        charData: setChartDataOther,\n        currGraph: \"doughnut\"\n      });\n    } else {\n      this.setState({\n        charData: setChartDataOther,\n        currGraph: \"bar\"\n      });\n    }\n  }\n\n  render() {\n    // return this.renderSomething(this.props.greeting);\n    const line = /*#__PURE__*/React.createElement(Line, {\n      data: this.state.charData,\n      options: charDataOptions,\n      width: 160,\n      height: 40,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 19\n      }\n    });\n    const doughnut = /*#__PURE__*/React.createElement(Doughnut, {\n      data: this.state.charData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 22\n      }\n    });\n    const bar = /*#__PURE__*/React.createElement(Bar, {\n      data: this.state.charData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }\n    });\n    return /*#__PURE__*/React.createElement(Tabs, {\n      id: \"graph-buttons\",\n      variant: \"pills\",\n      activeKey: this.state.currGraph,\n      onSelect: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Tab, {\n      id: \"line-tab\",\n      eventKey: \"line\",\n      title: \"Line\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Line, {\n      data: this.state.charData,\n      options: charDataOptions,\n      width: 160,\n      height: 40,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(Tab, {\n      id: \"bar-tab\",\n      eventKey: \"otherline\",\n      title: \"OtherLine\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Bar, {\n      data: this.state.charData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(Tab, {\n      id: \"doughnut-tab\",\n      eventKey: \"doughnut\",\n      title: \"Doughnut\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Doughnut, {\n      data: this.state.charData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nconst charDataOptions = {\n  responsive: true,\n  title: {\n    text: \"Hours spent during the last week\",\n    display: true\n  },\n  mainmaintainAspectRatio: false,\n  scales: {\n    yAxes: [{\n      ticks: {\n        autoSkip: true,\n        maxTicksLimit: 10,\n        beginAtZero: true\n      },\n      gridLines: {\n        display: false\n      }\n    }],\n    xAxes: [{\n      ticks: {\n        autoSkip: true,\n        maxTicksLimit: 10,\n        beginAtZero: true\n      },\n      gridLines: {\n        display: false\n      }\n    }]\n  }\n};\nconst setChartDataLine = {\n  labels: [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"],\n  datasets: [{\n    label: \"Hours Spent\",\n    lineTension: 0.5,\n    data: [12, 5, 13, 18, 20],\n    backgroundColor: \"rgba(75, 192, 192, 0.6)\",\n    borderWidth: 2,\n    borderColor: \"rgba(0,0,0,1)\"\n  }]\n};\nconst setChartDataOther = {\n  labels: [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"],\n  datasets: [{\n    label: \"Hours Spent\",\n    lineTension: 1,\n    data: [12, 5, 13, 18, 20],\n    backgroundColor: [\"rgba(75, 192, 192, 0.6)\", \"red\", \"green\", \"blue\", \"purple\", \"maroon\", \"grey\"],\n    borderWidth: 2,\n    borderColor: \"rgba(0,0,0,1)\"\n  }]\n};\nexport default Content; // const Dankmemes = () => {\n//   const [chartData, setChartData] = useState({});\n// const chart = () => {\n//   setChartData({\n//     labels: [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"],\n//     datasets: [\n//       {\n//         label: \"Hours Spent\",\n//         lineTension: 1,\n//         data: [3, 2, 1, 0, 8],\n//         backgroundColor: \"rgba(75, 192, 192, 0.6)\",\n//         borderWidth: 4,\n//       },\n//     ],\n//   });\n// };\n//   useEffect(() => {\n//     chart();\n//   }, []);\n//   return (\n//     <div>\n//       <h1>Activity Graph</h1>\n// <div\n//   className=\"LineGraph\"\n//   style={{ height: \"000px\", width: \"1000px\", margin: \"400px\" }}\n// >\n//         <Line data={chartData} options={charDataOptions} />\n//         <Doughnut data={chartData} options={charDataOptions} />\n//       </div>\n//     </div>\n//   );\n// };\n// export default Dankmemes;\n// // style={{ height: \"500px\", width: \"500px\" }}","map":{"version":3,"sources":["/Users/keeratgrewal/Desktop/ProductivityApp/src/components/layout/Content.js"],"names":["React","useState","useEffect","Line","Bar","Doughnut","Tab","Container","Row","Col","Nav","ToggleButtonGroup","ToggleButton","Component","throwStatement","Content","constructor","props","state","charData","currGraph","setKey","bind","componentDidMount","setState","renderSomething","randomArg","charDataOptions","k","setChartDataLine","setChartDataOther","render","line","doughnut","bar","handleChange","responsive","title","text","display","mainmaintainAspectRatio","scales","yAxes","ticks","autoSkip","maxTicksLimit","beginAtZero","gridLines","xAxes","labels","datasets","label","lineTension","data","backgroundColor","borderWidth","borderColor"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Line, Bar, Doughnut } from \"react-chartjs-2\";\nimport \"../../styles/content.css\";\nimport { Tab, Container, Row, Col, Nav, ToggleButtonGroup, ToggleButton} from \"react-bootstrap\";\nimport { Component } from \"react\";\nimport { throwStatement } from \"@babel/types\";\n\nclass Content extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      charData: {},\n      currGraph: \"line\"\n    };\n    this.setKey = this.setKey.bind(this)\n  }\n\n  componentDidMount() {\n    // if (this.props.greeting === \"line\") {\n    //   this.setState({ charData: setChartDataLine });\n    // } else {\n    //   this.setState({ charData: setChartDataOther });\n    // }\n    this.setState({currGraph: \"line\"});\n  }\n\n  renderSomething(randomArg) {\n    if (randomArg === \"line\") {\n      return (\n        <div className=\"LineGraph\">\n          {\n            <Line\n              data={this.state.charData}\n              options={charDataOptions}\n              width={160}\n              height={40}\n            />\n          }\n        </div>\n      );\n    } else if (randomArg === \"doughnut\") {\n      return (\n        <div className=\"LineGraph\">\n          {<Doughnut data={this.state.charData} />}\n        </div>\n      );\n    } else {\n    }\n    return <div>{<Bar data={this.state.charData} />}</div>;\n  }\n\n  setKey(k){\n    if(k === \"line\"){\n      this.setState({ charData: setChartDataLine, currGraph:\"line\"});\n    }\n    else if(k == \"otherline\"){\n      this.setState({ charData: setChartDataOther, currGraph:\"doughnut\" });\n    }\n    else{\n      this.setState({ charData: setChartDataOther, currGraph: \"bar\"});\n    }\n  }\n\n  render() {\n    // return this.renderSomething(this.props.greeting);\n    const line =  <Line data={this.state.charData} options={charDataOptions} width={160} height={40}/>\n    const doughnut = <Doughnut data={this.state.charData}/>\n    const bar = <Bar data={this.state.charData} />\n    return(\n      <Tabs\n        id=\"graph-buttons\"\n        variant={\"pills\"}\n        activeKey={this.state.currGraph}\n        onSelect={this.handleChange}\n      >\n        <Tab id=\"line-tab\" eventKey=\"line\" title=\"Line\">\n          <Line data={this.state.charData} options={charDataOptions} width={160} height={40}/>\n        </Tab>\n        <Tab id=\"bar-tab\" eventKey=\"otherline\" title=\"OtherLine\">\n          <Bar data={this.state.charData} />\n        </Tab>\n        <Tab id=\"doughnut-tab\" eventKey=\"doughnut\" title=\"Doughnut\">\n          <Doughnut data={this.state.charData}/>\n        </Tab>\n      </Tabs>\n    )\n  }\n}\n\nconst charDataOptions = {\n  responsive: true,\n  title: { text: \"Hours spent during the last week\", display: true },\n  mainmaintainAspectRatio: false,\n  scales: {\n    yAxes: [\n      {\n        ticks: {\n          autoSkip: true,\n          maxTicksLimit: 10,\n          beginAtZero: true,\n        },\n        gridLines: {\n          display: false,\n        },\n      },\n    ],\n    xAxes: [\n      {\n        ticks: {\n          autoSkip: true,\n          maxTicksLimit: 10,\n          beginAtZero: true,\n        },\n        gridLines: {\n          display: false,\n        },\n      },\n    ],\n  },\n};\n\nconst setChartDataLine = {\n  labels: [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"],\n  datasets: [\n    {\n      label: \"Hours Spent\",\n      lineTension: 0.5,\n      data: [12, 5, 13, 18, 20],\n      backgroundColor: \"rgba(75, 192, 192, 0.6)\",\n      borderWidth: 2,\n      borderColor: \"rgba(0,0,0,1)\",\n    },\n  ],\n};\n\nconst setChartDataOther = {\n  labels: [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"],\n  datasets: [\n    {\n      label: \"Hours Spent\",\n      lineTension: 1,\n      data: [12, 5, 13, 18, 20],\n      backgroundColor: [\n        \"rgba(75, 192, 192, 0.6)\",\n        \"red\",\n        \"green\",\n        \"blue\",\n        \"purple\",\n        \"maroon\",\n        \"grey\",\n      ],\n      borderWidth: 2,\n      borderColor: \"rgba(0,0,0,1)\",\n    },\n  ],\n};\n\nexport default Content;\n\n// const Dankmemes = () => {\n//   const [chartData, setChartData] = useState({});\n\n// const chart = () => {\n//   setChartData({\n//     labels: [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"],\n//     datasets: [\n//       {\n//         label: \"Hours Spent\",\n//         lineTension: 1,\n//         data: [3, 2, 1, 0, 8],\n//         backgroundColor: \"rgba(75, 192, 192, 0.6)\",\n//         borderWidth: 4,\n//       },\n//     ],\n//   });\n// };\n\n//   useEffect(() => {\n//     chart();\n//   }, []);\n\n//   return (\n//     <div>\n//       <h1>Activity Graph</h1>\n// <div\n//   className=\"LineGraph\"\n//   style={{ height: \"000px\", width: \"1000px\", margin: \"400px\" }}\n// >\n//         <Line data={chartData} options={charDataOptions} />\n//         <Doughnut data={chartData} options={charDataOptions} />\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Dankmemes;\n// // style={{ height: \"500px\", width: \"500px\" }}\n"]},"metadata":{},"sourceType":"module"}