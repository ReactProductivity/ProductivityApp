{"ast":null,"code":"var _jsxFileName = \"/Users/keeratgrewal/Desktop/ProductivityApp/src/components/layout/Content.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { Line, Bar, Doughnut } from \"react-chartjs-2\";\nimport \"../../styles/content.css\";\nimport { Component } from \"react\";\n\nclass Content extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      charData: {}\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.greeting === \"line\") {\n      this.setState({\n        charData: setChartDataLine\n      });\n    } else {\n      this.setState({\n        charData: setChartDataOther\n      });\n    }\n  }\n\n  renderSomething(randomArg) {\n    if (randomArg === \"line\") {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"LineGraph\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Line, {\n        data: this.state.charData,\n        options: charDataOptions,\n        width: 160,\n        height: 40,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 13\n        }\n      }));\n    } else if (randomArg === \"doughnut\") {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"LineGraph\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Doughnut, {\n        data: this.state.charData,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 12\n        }\n      }));\n    } else {}\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 12\n      }\n    }, /*#__PURE__*/React.createElement(Bar, {\n      data: this.state.charData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 18\n      }\n    }));\n  }\n\n  render() {\n    return this.renderSomething(this.props.greeting); // <div className=\"LineGraph\" style={{ height: \"1000px\", width: \"1000px\" }}>\n    //   {<Doughnut data={this.state.charData} options={charDataOptions} />}\n    // </div>\n  }\n\n}\n\nconst charDataOptions = {\n  responsive: true,\n  title: {\n    text: \"Hours spent during the last week\",\n    display: true\n  },\n  mainmaintainAspectRatio: false,\n  scales: {\n    yAxes: [{\n      ticks: {\n        autoSkip: true,\n        maxTicksLimit: 10,\n        beginAtZero: true\n      },\n      gridLines: {\n        display: false\n      }\n    }],\n    xAxes: [{\n      ticks: {\n        autoSkip: true,\n        maxTicksLimit: 10,\n        beginAtZero: true\n      },\n      gridLines: {\n        display: false\n      }\n    }]\n  }\n};\nconst setChartDataLine = {\n  labels: [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"],\n  datasets: [{\n    label: \"Hours Spent\",\n    lineTension: 0.5,\n    data: [12, 5, 13, 18, 20],\n    backgroundColor: \"rgba(75, 192, 192, 0.6)\",\n    borderWidth: 2,\n    borderColor: \"rgba(0,0,0,1)\"\n  }]\n};\nconst setChartDataOther = {\n  labels: [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"],\n  datasets: [{\n    label: \"Hours Spent\",\n    lineTension: 1,\n    data: [12, 5, 13, 18, 20],\n    backgroundColor: [\"rgba(75, 192, 192, 0.6)\", \"red\", \"green\", \"blue\", \"purple\", \"maroon\", \"grey\"],\n    borderWidth: 2,\n    borderColor: \"rgba(0,0,0,1)\"\n  }]\n};\nexport default Content; // const Dankmemes = () => {\n//   const [chartData, setChartData] = useState({});\n// const chart = () => {\n//   setChartData({\n//     labels: [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"],\n//     datasets: [\n//       {\n//         label: \"Hours Spent\",\n//         lineTension: 1,\n//         data: [3, 2, 1, 0, 8],\n//         backgroundColor: \"rgba(75, 192, 192, 0.6)\",\n//         borderWidth: 4,\n//       },\n//     ],\n//   });\n// };\n//   useEffect(() => {\n//     chart();\n//   }, []);\n//   return (\n//     <div>\n//       <h1>Activity Graph</h1>\n// <div\n//   className=\"LineGraph\"\n//   style={{ height: \"000px\", width: \"1000px\", margin: \"400px\" }}\n// >\n//         <Line data={chartData} options={charDataOptions} />\n//         <Doughnut data={chartData} options={charDataOptions} />\n//       </div>\n//     </div>\n//   );\n// };\n// export default Dankmemes;\n// // style={{ height: \"500px\", width: \"500px\" }}","map":{"version":3,"sources":["/Users/keeratgrewal/Desktop/ProductivityApp/src/components/layout/Content.js"],"names":["React","useState","useEffect","Line","Bar","Doughnut","Component","Content","constructor","props","state","charData","componentDidMount","greeting","setState","setChartDataLine","setChartDataOther","renderSomething","randomArg","charDataOptions","render","responsive","title","text","display","mainmaintainAspectRatio","scales","yAxes","ticks","autoSkip","maxTicksLimit","beginAtZero","gridLines","xAxes","labels","datasets","label","lineTension","data","backgroundColor","borderWidth","borderColor"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,IAAT,EAAeC,GAAf,EAAoBC,QAApB,QAAoC,iBAApC;AACA,OAAO,0BAAP;AACA,SAASC,SAAT,QAA0B,OAA1B;;AAEA,MAAMC,OAAN,SAAsBD,SAAtB,CAAgC;AAC9BE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,QAAQ,EAAE;AADC,KAAb;AAGD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,QAAI,KAAKH,KAAL,CAAWI,QAAX,KAAwB,MAA5B,EAAoC;AAClC,WAAKC,QAAL,CAAc;AAAEH,QAAAA,QAAQ,EAAEI;AAAZ,OAAd;AACD,KAFD,MAEO;AACL,WAAKD,QAAL,CAAc;AAAEH,QAAAA,QAAQ,EAAEK;AAAZ,OAAd;AACD;AACF;;AAEDC,EAAAA,eAAe,CAACC,SAAD,EAAY;AACzB,QAAIA,SAAS,KAAK,MAAlB,EAA0B;AACxB,0BACE;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAEI,oBAAC,IAAD;AACE,QAAA,IAAI,EAAE,KAAKR,KAAL,CAAWC,QADnB;AAEE,QAAA,OAAO,EAAEQ,eAFX;AAGE,QAAA,KAAK,EAAE,GAHT;AAIE,QAAA,MAAM,EAAE,EAJV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,CADF;AAYD,KAbD,MAaO,IAAID,SAAS,KAAK,UAAlB,EAA8B;AACnC,0BACE;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACG,oBAAC,QAAD;AAAU,QAAA,IAAI,EAAE,KAAKR,KAAL,CAAWC,QAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADH,CADF;AAKD,KANM,MAMA,CACN;;AACD,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAM,oBAAC,GAAD;AAAK,MAAA,IAAI,EAAE,KAAKD,KAAL,CAAWC,QAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAN,CAAP;AACD;;AAEDS,EAAAA,MAAM,GAAG;AACP,WAAO,KAAKH,eAAL,CAAqB,KAAKR,KAAL,CAAWI,QAAhC,CAAP,CADO,CAEP;AACA;AACA;AACD;;AA9C6B;;AAiDhC,MAAMM,eAAe,GAAG;AACtBE,EAAAA,UAAU,EAAE,IADU;AAEtBC,EAAAA,KAAK,EAAE;AAAEC,IAAAA,IAAI,EAAE,kCAAR;AAA4CC,IAAAA,OAAO,EAAE;AAArD,GAFe;AAGtBC,EAAAA,uBAAuB,EAAE,KAHH;AAItBC,EAAAA,MAAM,EAAE;AACNC,IAAAA,KAAK,EAAE,CACL;AACEC,MAAAA,KAAK,EAAE;AACLC,QAAAA,QAAQ,EAAE,IADL;AAELC,QAAAA,aAAa,EAAE,EAFV;AAGLC,QAAAA,WAAW,EAAE;AAHR,OADT;AAMEC,MAAAA,SAAS,EAAE;AACTR,QAAAA,OAAO,EAAE;AADA;AANb,KADK,CADD;AAaNS,IAAAA,KAAK,EAAE,CACL;AACEL,MAAAA,KAAK,EAAE;AACLC,QAAAA,QAAQ,EAAE,IADL;AAELC,QAAAA,aAAa,EAAE,EAFV;AAGLC,QAAAA,WAAW,EAAE;AAHR,OADT;AAMEC,MAAAA,SAAS,EAAE;AACTR,QAAAA,OAAO,EAAE;AADA;AANb,KADK;AAbD;AAJc,CAAxB;AAgCA,MAAMT,gBAAgB,GAAG;AACvBmB,EAAAA,MAAM,EAAE,CAAC,QAAD,EAAW,SAAX,EAAsB,WAAtB,EAAmC,UAAnC,EAA+C,QAA/C,CADe;AAEvBC,EAAAA,QAAQ,EAAE,CACR;AACEC,IAAAA,KAAK,EAAE,aADT;AAEEC,IAAAA,WAAW,EAAE,GAFf;AAGEC,IAAAA,IAAI,EAAE,CAAC,EAAD,EAAK,CAAL,EAAQ,EAAR,EAAY,EAAZ,EAAgB,EAAhB,CAHR;AAIEC,IAAAA,eAAe,EAAE,yBAJnB;AAKEC,IAAAA,WAAW,EAAE,CALf;AAMEC,IAAAA,WAAW,EAAE;AANf,GADQ;AAFa,CAAzB;AAcA,MAAMzB,iBAAiB,GAAG;AACxBkB,EAAAA,MAAM,EAAE,CAAC,QAAD,EAAW,SAAX,EAAsB,WAAtB,EAAmC,UAAnC,EAA+C,QAA/C,CADgB;AAExBC,EAAAA,QAAQ,EAAE,CACR;AACEC,IAAAA,KAAK,EAAE,aADT;AAEEC,IAAAA,WAAW,EAAE,CAFf;AAGEC,IAAAA,IAAI,EAAE,CAAC,EAAD,EAAK,CAAL,EAAQ,EAAR,EAAY,EAAZ,EAAgB,EAAhB,CAHR;AAIEC,IAAAA,eAAe,EAAE,CACf,yBADe,EAEf,KAFe,EAGf,OAHe,EAIf,MAJe,EAKf,QALe,EAMf,QANe,EAOf,MAPe,CAJnB;AAaEC,IAAAA,WAAW,EAAE,CAbf;AAcEC,IAAAA,WAAW,EAAE;AAdf,GADQ;AAFc,CAA1B;AAsBA,eAAelC,OAAf,C,CAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Line, Bar, Doughnut } from \"react-chartjs-2\";\nimport \"../../styles/content.css\";\nimport { Component } from \"react\";\n\nclass Content extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      charData: {},\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.greeting === \"line\") {\n      this.setState({ charData: setChartDataLine });\n    } else {\n      this.setState({ charData: setChartDataOther });\n    }\n  }\n\n  renderSomething(randomArg) {\n    if (randomArg === \"line\") {\n      return (\n        <div className=\"LineGraph\">\n          {\n            <Line\n              data={this.state.charData}\n              options={charDataOptions}\n              width={160}\n              height={40}\n            />\n          }\n        </div>\n      );\n    } else if (randomArg === \"doughnut\") {\n      return (\n        <div className=\"LineGraph\">\n          {<Doughnut data={this.state.charData} />}\n        </div>\n      );\n    } else {\n    }\n    return <div>{<Bar data={this.state.charData} />}</div>;\n  }\n\n  render() {\n    return this.renderSomething(this.props.greeting);\n    // <div className=\"LineGraph\" style={{ height: \"1000px\", width: \"1000px\" }}>\n    //   {<Doughnut data={this.state.charData} options={charDataOptions} />}\n    // </div>\n  }\n}\n\nconst charDataOptions = {\n  responsive: true,\n  title: { text: \"Hours spent during the last week\", display: true },\n  mainmaintainAspectRatio: false,\n  scales: {\n    yAxes: [\n      {\n        ticks: {\n          autoSkip: true,\n          maxTicksLimit: 10,\n          beginAtZero: true,\n        },\n        gridLines: {\n          display: false,\n        },\n      },\n    ],\n    xAxes: [\n      {\n        ticks: {\n          autoSkip: true,\n          maxTicksLimit: 10,\n          beginAtZero: true,\n        },\n        gridLines: {\n          display: false,\n        },\n      },\n    ],\n  },\n};\n\nconst setChartDataLine = {\n  labels: [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"],\n  datasets: [\n    {\n      label: \"Hours Spent\",\n      lineTension: 0.5,\n      data: [12, 5, 13, 18, 20],\n      backgroundColor: \"rgba(75, 192, 192, 0.6)\",\n      borderWidth: 2,\n      borderColor: \"rgba(0,0,0,1)\",\n    },\n  ],\n};\n\nconst setChartDataOther = {\n  labels: [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"],\n  datasets: [\n    {\n      label: \"Hours Spent\",\n      lineTension: 1,\n      data: [12, 5, 13, 18, 20],\n      backgroundColor: [\n        \"rgba(75, 192, 192, 0.6)\",\n        \"red\",\n        \"green\",\n        \"blue\",\n        \"purple\",\n        \"maroon\",\n        \"grey\",\n      ],\n      borderWidth: 2,\n      borderColor: \"rgba(0,0,0,1)\",\n    },\n  ],\n};\n\nexport default Content;\n\n// const Dankmemes = () => {\n//   const [chartData, setChartData] = useState({});\n\n// const chart = () => {\n//   setChartData({\n//     labels: [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"],\n//     datasets: [\n//       {\n//         label: \"Hours Spent\",\n//         lineTension: 1,\n//         data: [3, 2, 1, 0, 8],\n//         backgroundColor: \"rgba(75, 192, 192, 0.6)\",\n//         borderWidth: 4,\n//       },\n//     ],\n//   });\n// };\n\n//   useEffect(() => {\n//     chart();\n//   }, []);\n\n//   return (\n//     <div>\n//       <h1>Activity Graph</h1>\n// <div\n//   className=\"LineGraph\"\n//   style={{ height: \"000px\", width: \"1000px\", margin: \"400px\" }}\n// >\n//         <Line data={chartData} options={charDataOptions} />\n//         <Doughnut data={chartData} options={charDataOptions} />\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Dankmemes;\n// // style={{ height: \"500px\", width: \"500px\" }}\n"]},"metadata":{},"sourceType":"module"}