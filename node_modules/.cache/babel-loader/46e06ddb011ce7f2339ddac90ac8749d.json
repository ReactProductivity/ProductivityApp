{"ast":null,"code":"var _jsxFileName = \"/Users/keeratgrewal/Desktop/ProductivityApp/src/App.js\";\nimport React from \"react\";\nimport \"./App.css\"; //import 'bootstrap/dist/css/bootstrap.min.css';\n\nimport Navigation from \"./components/layout/Navigation\";\nimport FriendsBar from \"./components/layout/FriendsBar\";\nimport { MainContent } from \"./components/layout/MainContent\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport Login from \"./components/auth/Login\";\nimport Register from \"./components/auth/Register\";\nimport { getFirebase } from \"react-redux-firebase\";\nimport { connect } from \"react-redux\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    /* this is where we initial friends for user based from database for the logged in user*/\n    if (this.props.auth.uid) {\n      //console.log(this.props)\n      const firebase = getFirebase().database();\n      const uid = getFirebase().auth().currentUser.uid;\n      const onlineRef = firebase.ref('.info/connected'); // Get a reference to the list of connections\n\n      var isOfflineForDatabase = {\n        state: 'offline',\n        last_changed: getFirebase().database.ServerValue.TIMESTAMP\n      };\n      var isOnlineForDatabase = {\n        state: 'online',\n        last_changed: getFirebase().database.ServerValue.TIMESTAMP\n      };\n      onlineRef.on('value', snapshot => {\n        firebase.ref(`/status/${uid}`).onDisconnect() // Set up the disconnect hook\n        .set(isOfflineForDatabase) // The value to be set for this key when the client disconnects\n        .then(() => {\n          firebase.ref(`/status/${uid}`).set(isOnlineForDatabase);\n        });\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(BrowserRouter, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Navigation, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Switch, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: \"/\",\n      component: MainContent,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/login\",\n      component: Login,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/register\",\n      component: Register,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 15\n      }\n    }))));\n  }\n\n} // import { import } from '@babel/types';\n\n\nconst addAppToProps = state => {\n  return {\n    auth: state.firebase.auth\n  };\n};\n\nexport default connect(addAppToProps)(App);","map":{"version":3,"sources":["/Users/keeratgrewal/Desktop/ProductivityApp/src/App.js"],"names":["React","Navigation","FriendsBar","MainContent","BrowserRouter","Switch","Route","Login","Register","getFirebase","connect","App","Component","constructor","props","render","auth","uid","firebase","database","currentUser","onlineRef","ref","isOfflineForDatabase","state","last_changed","ServerValue","TIMESTAMP","isOnlineForDatabase","on","snapshot","onDisconnect","set","then","addAppToProps"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP,C,CACA;;AACA,OAAOC,UAAP,MAAuB,gCAAvB;AACA,OAAOC,UAAP,MAAuB,gCAAvB;AACA,SAAQC,WAAR,QAA0B,iCAA1B;AACA,SAASC,aAAT,EAAwBC,MAAxB,EAAgCC,KAAhC,QAA6C,kBAA7C;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,SAASC,WAAT,QAA4B,sBAA5B;AACA,SAASC,OAAT,QAAwB,aAAxB;;AAEA,MAAMC,GAAN,SAAkBX,KAAK,CAACY,SAAxB,CAAkC;AAC9BC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACH;;AACDC,EAAAA,MAAM,GAAE;AACR;AACE,QAAI,KAAKD,KAAL,CAAWE,IAAX,CAAgBC,GAApB,EAAyB;AACrB;AACA,YAAMC,QAAQ,GAAGT,WAAW,GAAGU,QAAd,EAAjB;AACA,YAAMF,GAAG,GAAGR,WAAW,GAAGO,IAAd,GAAqBI,WAArB,CAAiCH,GAA7C;AACA,YAAMI,SAAS,GAAGH,QAAQ,CAACI,GAAT,CAAa,iBAAb,CAAlB,CAJqB,CAI8B;;AAEnD,UAAIC,oBAAoB,GAAG;AACzBC,QAAAA,KAAK,EAAE,SADkB;AAEzBC,QAAAA,YAAY,EAAEhB,WAAW,GAAGU,QAAd,CAAuBO,WAAvB,CAAmCC;AAFxB,OAA3B;AAKA,UAAIC,mBAAmB,GAAG;AACtBJ,QAAAA,KAAK,EAAE,QADe;AAEtBC,QAAAA,YAAY,EAAEhB,WAAW,GAAGU,QAAd,CAAuBO,WAAvB,CAAmCC;AAF3B,OAA1B;AAKAN,MAAAA,SAAS,CAACQ,EAAV,CAAa,OAAb,EAAsBC,QAAQ,IAAI;AAEhCZ,QAAAA,QAAQ,CACLI,GADH,CACQ,WAAUL,GAAI,EADtB,EAEGc,YAFH,GAEkB;AAFlB,SAGGC,GAHH,CAGOT,oBAHP,EAG6B;AAH7B,SAIGU,IAJH,CAIQ,MAAM;AACRf,UAAAA,QAAQ,CAACI,GAAT,CAAc,WAAUL,GAAI,EAA5B,EAA+Be,GAA/B,CAAmCJ,mBAAnC;AACH,SANH;AAQD,OAVD;AAWH;;AAED,wBACE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAEE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,EAAC,GAAlB;AAAsB,MAAA,SAAS,EAAEzB,WAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAEE,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,QAAZ;AAAqB,MAAA,SAAS,EAAEI,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,eAGE,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,WAAZ;AAAwB,MAAA,SAAS,EAAEC,QAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,CAFF,CADF,CADF;AAYH;;AA/C+B,C,CAiDlC;;;AAEA,MAAM0B,aAAa,GAAIV,KAAD,IAAW;AAC/B,SAAO;AACLR,IAAAA,IAAI,EAAEQ,KAAK,CAACN,QAAN,CAAeF;AADhB,GAAP;AAGD,CAJD;;AAMA,eAAeN,OAAO,CAACwB,aAAD,CAAP,CAAuBvB,GAAvB,CAAf","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n//import 'bootstrap/dist/css/bootstrap.min.css';\nimport Navigation from \"./components/layout/Navigation\";\nimport FriendsBar from \"./components/layout/FriendsBar\";\nimport {MainContent} from \"./components/layout/MainContent\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport Login from \"./components/auth/Login\";\nimport Register from \"./components/auth/Register\";\nimport { getFirebase } from \"react-redux-firebase\";\nimport { connect } from \"react-redux\";\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    render(){\n    /* this is where we initial friends for user based from database for the logged in user*/\n      if (this.props.auth.uid) {\n          //console.log(this.props)\n          const firebase = getFirebase().database();\n          const uid = getFirebase().auth().currentUser.uid;\n          const onlineRef = firebase.ref('.info/connected'); // Get a reference to the list of connections\n\n          var isOfflineForDatabase = {\n            state: 'offline',\n            last_changed: getFirebase().database.ServerValue.TIMESTAMP,\n          };\n          \n          var isOnlineForDatabase = {\n              state: 'online',\n              last_changed: getFirebase().database.ServerValue.TIMESTAMP,\n          };\n\n          onlineRef.on('value', snapshot => {\n          \n            firebase\n              .ref(`/status/${uid}`)\n              .onDisconnect() // Set up the disconnect hook\n              .set(isOfflineForDatabase) // The value to be set for this key when the client disconnects\n              .then(() => {\n                  firebase.ref(`/status/${uid}`).set(isOnlineForDatabase);\n              });\n            \n          });\n      }\n\n      return (\n        <BrowserRouter>\n          <div className=\"App\">\n            <Navigation />\n            <Switch>\n              <Route exact path=\"/\" component={MainContent} />\n              <Route path=\"/login\" component={Login} />\n              <Route path=\"/register\" component={Register} />\n            </Switch>\n          </div>\n        </BrowserRouter>\n      );\n  }\n}\n// import { import } from '@babel/types';\n\nconst addAppToProps = (state) => {\n  return {\n    auth: state.firebase.auth,\n  };\n};\n\nexport default connect(addAppToProps)(App)\n"]},"metadata":{},"sourceType":"module"}