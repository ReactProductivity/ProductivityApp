{"ast":null,"code":"var _jsxFileName = \"/Users/keeratgrewal/Desktop/ProductivityApp/src/components/layout/FriendsBar.js\";\nimport React, { Component } from \"react\";\nimport \"../../styles/friendsBar.css\";\nimport { Container } from \"react-bootstrap\";\nimport { Row } from \"react-bootstrap\";\nimport { Col } from \"react-bootstrap\";\nimport { Button } from \"react-bootstrap\";\nimport { Form } from \"react-bootstrap\";\nimport { Person } from \"./Person\";\nimport ListGroup from \"react-bootstrap/ListGroup\";\nimport addFriend from \"../../store/actions/friendActions\";\nimport { connect } from \"react-redux\";\nimport { compose } from \"redux\";\nimport { firestoreConnect } from \"react-redux-firebase\";\nimport { Redirect } from \"react-router-dom\";\nimport { isLoggedIn } from '../../store/actions/authActions';\n\nclass FriendsBar extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      friends: [],\n      filtered: [],\n      currentSearch: \"\",\n      currentFunction: \"Find friend...\",\n      names: []\n    }; //console.log(this.props)\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.setState({\n      friends: nextProps.initialFriends,\n      filtered: nextProps.initialFriends\n    });\n  }\n\n  componentDidMount() {\n    // console.log(this.props.initialFriends)\n    this.setState({\n      friends: this.props.initialFriends\n    }); //console.log(this.props.initialFriends)\n  }\n\n  componentDidUpdate() {\n    console.log(this.props.initialFriends); //console.log(this.props)\n\n    let getNames = [];\n    var i = 0;\n\n    for (i = 0; i < this.props.initialFriends.length; i++) {\n      let item = this.state.friends[i];\n      getNames.push(this.props.users.this.state.friends[i].firstname);\n    }\n\n    console.log(getNames);\n  }\n  /* filtered ->  what is displayed on friendsbar\n       friends -> what keeps track of list of friends */\n\n\n  addFriend(name) {\n    if (name === \"\") {\n      name = this.state.currentFunction;\n    }\n\n    const friendsList = this.state.friends.slice();\n    const filteredList = this.state.filtered.slice();\n\n    if (name === \"Find friend...\") {\n      /* when switching to add friend mode, clear out friends bar*/\n      this.setState({\n        filtered: [],\n        currentFunction: \"Add friend...\"\n      });\n    } else if (name === \"Add friend...\") {\n      /* a switch to find friends mode brings back friends list*/\n      this.setState({\n        filtered: friendsList,\n        currentFunction: \"Find friend...\"\n      });\n    } else {\n      if (this.state.currentFunction === \"Add friend...\") {\n        name = document.getElementById(\"searchFriend\").value;\n        friendsList.push({\n          name: name\n        });\n        filteredList.push({\n          name: name\n        });\n        this.setState({\n          friends: friendsList,\n          filtered: filteredList\n        });\n      }\n    }\n  }\n\n  toggleFriendsBar() {\n    document.getElementById(\"sidebar\").classList.toggle(\"active\");\n  } // handleChange(input) {\n  //     let currSearch = input.target.value;\n  //     let currFriendsList = [...this.props.initialFriends];\n  //     let filteredList = [...this.state.filtered];\n  //     if (input.target.value === \"\") {\n  //         if (this.state.currentFunction === \"Add friend...\")\n  //             currSearch = \"Add friend...\";\n  //         else {\n  //             currSearch = \"Find friend...\";\n  //             filteredList = currFriendsList;\n  //         }\n  //         this.setState({ filtered: filteredList, currentFunction: currSearch });\n  //         return;\n  //     }\n  //     if (this.state.currentFunction === \"Find friend...\") {\n  //         filteredList = currFriendsList.filter((item) => {\n  //             const lc = item.toLowerCase();\n  //             const filter = input.target.value.toLowerCase();\n  //             return lc.includes(filter);\n  //         });\n  //     }\n  //     this.setState({ friends: currFriendsList, filtered: filteredList});\n  // }\n\n\n  handleChange(e) {\n    let currentList = []; // Variable to hold the filtered list before putting into state\n\n    let newList = []; // If the search bar isn't empty\n\n    if (e.target.value !== \"\") {\n      // Assign the original list to currentList\n      currentList = this.props.items; // Use .filter() to determine which items should be displayed\n      // based on the search terms\n\n      newList = currentList.filter(item => {\n        // change current item to lowercase\n        const lc = item.toLowerCase(); // change search term to lowercase\n\n        const filter = e.target.value.toLowerCase(); // check to see if the current list item includes the search term\n        // If it does, it will be added to newList. Using lowercase eliminates\n        // issues with capitalization in search terms and search content\n\n        return lc.includes(filter);\n      });\n    } else {\n      // If the search bar is empty, set newList to original task list\n      newList = this.props.items;\n    } // Set the filtered state based on what our rules added to newList\n\n\n    this.setState({\n      filtered: newList\n    });\n  }\n\n  render() {\n    // redirect to login page if not logged in\n    if (!this.props.auth.uid) {\n      return /*#__PURE__*/React.createElement(Redirect, {\n        to: \"/login\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 20\n        }\n      });\n    } //console.log(this.props)\n    // let getNames = []\n    // var i = 0;\n    // if(this.state.friends !== undefined){\n    //     for (i = 0; i < this.state.friends.length; i++) {\n    //         let item = this.state.friends[i];\n    //         getNames.push(this.props.users.this.state.friends[i].firstname);\n    //     }\n    // }\n    // console.log(getNames)\n\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Container, {\n      id: \"sidebar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"toggle\",\n      onClick: this.toggleFriendsBar,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      id: \"friendsText\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 25\n      }\n    }, \"FRIENDS\")), /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      id: \"addFriend\",\n      variant: \"dark\",\n      onClick: () => this.addFriend(document.getElementById(\"searchFriend\").value),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 25\n      }\n    }, \"+\"))), /*#__PURE__*/React.createElement(\"hr\", {\n      id: \"separate\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Form, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Form.Control, {\n      id: \"searchFriend\",\n      placeholder: this.state.currentFunction,\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 29\n      }\n    })))), /*#__PURE__*/React.createElement(ListGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"friendList\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 21\n      }\n    }, this.props.initialFriends && this.props.initialFriends.map((friend, index) => {\n      // get the name of the friend based off of the users\n      // console.log(this.props.users)\n      var i = 0;\n      let name = null;\n\n      for (i = 0; i < this.props.users.length; i++) {\n        if (this.props.users[i].uid === friend) {\n          name = this.props.users[i].firstname;\n          break;\n        }\n      } // console.log(name)\n\n\n      return /*#__PURE__*/React.createElement(Person, {\n        key: friend,\n        name: name,\n        uid: friend,\n        isLoggedIn: this.props.isLoggedIn,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 41\n        }\n      });\n    })))));\n  }\n\n}\n\nconst addFriendsListToProps = state => {\n  console.log(state);\n  return {\n    initialFriends: state.firebase.profile.friends,\n    auth: state.firebase.auth,\n    users: state.firestore.ordered.users\n  };\n};\n\nconst addDispatchtoProps = dispatch => {\n  return {\n    addFriend: friend => dispatch(addFriend(friend)),\n    isLoggedIn: uid => dispatch(isLoggedIn(uid))\n  };\n};\n\nexport default compose(firestoreConnect(() => [\"users\"]), connect(addFriendsListToProps, addDispatchtoProps))(FriendsBar); // export default connect(addFriendsListToProps,addDispatchtoProps)(FriendsBar)","map":{"version":3,"sources":["/Users/keeratgrewal/Desktop/ProductivityApp/src/components/layout/FriendsBar.js"],"names":["React","Component","Container","Row","Col","Button","Form","Person","ListGroup","addFriend","connect","compose","firestoreConnect","Redirect","isLoggedIn","FriendsBar","constructor","props","state","friends","filtered","currentSearch","currentFunction","names","handleChange","bind","componentWillReceiveProps","nextProps","setState","initialFriends","componentDidMount","componentDidUpdate","console","log","getNames","i","length","item","push","users","this","firstname","name","friendsList","slice","filteredList","document","getElementById","value","toggleFriendsBar","classList","toggle","e","currentList","newList","target","items","filter","lc","toLowerCase","includes","render","auth","uid","map","friend","index","addFriendsListToProps","firebase","profile","firestore","ordered","addDispatchtoProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport \"../../styles/friendsBar.css\";\nimport { Container } from \"react-bootstrap\";\nimport { Row } from \"react-bootstrap\";\nimport { Col } from \"react-bootstrap\";\nimport { Button } from \"react-bootstrap\";\nimport { Form } from \"react-bootstrap\";\nimport { Person } from \"./Person\";\nimport ListGroup from \"react-bootstrap/ListGroup\";\nimport addFriend from \"../../store/actions/friendActions\";\nimport { connect } from \"react-redux\";\nimport { compose } from \"redux\";\nimport { firestoreConnect } from \"react-redux-firebase\";\nimport { Redirect } from \"react-router-dom\";\nimport {isLoggedIn} from '../../store/actions/authActions';\n\nclass FriendsBar extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            friends: [],\n            filtered: [],\n            currentSearch: \"\",\n            currentFunction: \"Find friend...\",\n            names: []\n        };\n        //console.log(this.props)\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    componentWillReceiveProps(nextProps){\n        this.setState({ friends: nextProps.initialFriends, filtered: nextProps.initialFriends})\n    }   \n\n    componentDidMount(){\n        // console.log(this.props.initialFriends)\n        this.setState({friends: this.props.initialFriends})\n        //console.log(this.props.initialFriends)\n    }\n\n    componentDidUpdate(){\n       console.log(this.props.initialFriends)\n                //console.log(this.props)\n        let getNames = []\n        var i = 0;\n        for (i = 0; i < this.props.initialFriends.length; i++) {\n            let item = this.state.friends[i];\n            getNames.push(this.props.users.this.state.friends[i].firstname);\n        }\n        console.log(getNames)\n    }\n\n  /* filtered ->  what is displayed on friendsbar\n       friends -> what keeps track of list of friends */\n    addFriend(name) {\n        if (name === \"\") {\n            name = this.state.currentFunction;\n        }\n        const friendsList = this.state.friends.slice();\n        const filteredList = this.state.filtered.slice();\n        if (name === \"Find friend...\") {\n        /* when switching to add friend mode, clear out friends bar*/\n            this.setState({ filtered: [], currentFunction: \"Add friend...\" });\n        } \n        else if (name === \"Add friend...\") {\n        /* a switch to find friends mode brings back friends list*/\n            this.setState({\n                filtered: friendsList,\n                currentFunction: \"Find friend...\",\n            });\n        } \n        else {\n            if (this.state.currentFunction === \"Add friend...\") {\n                name = document.getElementById(\"searchFriend\").value;\n                friendsList.push({ name: name });\n                filteredList.push({ name: name });\n                this.setState({ friends: friendsList, filtered: filteredList });\n            }\n        }\n    }\n\n    toggleFriendsBar() {\n        document.getElementById(\"sidebar\").classList.toggle(\"active\");\n    }\n\n    // handleChange(input) {\n    //     let currSearch = input.target.value;\n    //     let currFriendsList = [...this.props.initialFriends];\n    //     let filteredList = [...this.state.filtered];\n    //     if (input.target.value === \"\") {\n    //         if (this.state.currentFunction === \"Add friend...\")\n    //             currSearch = \"Add friend...\";\n    //         else {\n    //             currSearch = \"Find friend...\";\n    //             filteredList = currFriendsList;\n    //         }\n    //         this.setState({ filtered: filteredList, currentFunction: currSearch });\n    //         return;\n    //     }\n    //     if (this.state.currentFunction === \"Find friend...\") {\n    //         filteredList = currFriendsList.filter((item) => {\n    //             const lc = item.toLowerCase();\n    //             const filter = input.target.value.toLowerCase();\n    //             return lc.includes(filter);\n    //         });\n    //     }\n    //     this.setState({ friends: currFriendsList, filtered: filteredList});\n\n    // }\n    handleChange(e) {\n        let currentList = [];\n        // Variable to hold the filtered list before putting into state\n        let newList = [];\n\n        // If the search bar isn't empty\n        if (e.target.value !== \"\") {\n            // Assign the original list to currentList\n            currentList = this.props.items;\n\n            // Use .filter() to determine which items should be displayed\n            // based on the search terms\n            newList = currentList.filter(item => {\n                // change current item to lowercase\n                const lc = item.toLowerCase();\n                // change search term to lowercase\n                const filter = e.target.value.toLowerCase();\n                // check to see if the current list item includes the search term\n                // If it does, it will be added to newList. Using lowercase eliminates\n                // issues with capitalization in search terms and search content\n                return lc.includes(filter);\n            });\n        } \n        else {\n            // If the search bar is empty, set newList to original task list\n            newList = this.props.items;\n        }\n        // Set the filtered state based on what our rules added to newList\n        this.setState({\n            filtered: newList\n        });\n    }\n\n    render() {\n        // redirect to login page if not logged in\n        if (!this.props.auth.uid) {\n            return <Redirect to=\"/login\" />;\n        }\n        \n        //console.log(this.props)\n        // let getNames = []\n        // var i = 0;\n        // if(this.state.friends !== undefined){\n        //     for (i = 0; i < this.state.friends.length; i++) {\n        //         let item = this.state.friends[i];\n        //         getNames.push(this.props.users.this.state.friends[i].firstname);\n        //     }\n        // }\n        // console.log(getNames)\n            \n        return (\n            <>\n            <Container id=\"sidebar\">\n                <div className=\"toggle\" onClick={this.toggleFriendsBar}>\n                    <span></span>\n                    <span></span>\n                    <span></span>\n                </div>\n\n                <Row>\n                    <Col>\n                        <p id=\"friendsText\">FRIENDS</p>\n                    </Col>\n                    <Col>\n                        <Button\n                            id=\"addFriend\"\n                            variant=\"dark\"\n                            onClick={() =>\n                            this.addFriend(document.getElementById(\"searchFriend\").value)\n                            }\n                        >\n                            +\n                        </Button>\n                    </Col>\n                </Row>\n                <hr id=\"separate\"></hr>\n                <Row>\n                    <Col>\n                        <Form>\n                            <Form.Control\n                            id=\"searchFriend\"\n                            placeholder={this.state.currentFunction}\n                            onChange={this.handleChange}\n                            />\n                        </Form>\n                    </Col>\n                </Row>\n                <ListGroup>\n                    <div id=\"friendList\">\n                        {/* {this.state.filtered &&\n                            this.state.filtered.map((friend) => {\n                            return (\n                                <Person\n                                    key={friend}\n                                    name={friend}\n                                    uid={friend}\n                                    isLoggedIn = {this.props.isLoggedIn}\n                                >\n                                </Person>\n                            );\n                            })} */}\n                            {this.props.initialFriends &&\n                                this.props.initialFriends.map((friend, index) => {\n                                // get the name of the friend based off of the users\n                                    // console.log(this.props.users)\n                                    var i = 0;\n                                    let name = null;\n                                    for(i = 0; i < this.props.users.length; i++){\n                                        if(this.props.users[i].uid === friend){\n                                            name = this.props.users[i].firstname;\n                                            break;\n                                        }\n                                    }\n                                    // console.log(name)\n                                    return (\n                                        <Person\n                                            key={friend}\n                                            name={name}\n                                            uid={friend}\n                                            isLoggedIn = {this.props.isLoggedIn}\n                                        >\n                                        </Person>\n                                    );\n                            })}\n                    </div>\n                </ListGroup>\n            </Container>\n            </>\n        );\n    }\n}\n\nconst addFriendsListToProps = (state) => {\n    console.log(state)\n    return {\n        initialFriends: state.firebase.profile.friends,\n        auth: state.firebase.auth,\n        users: state.firestore.ordered.users\n    };\n};\n\nconst addDispatchtoProps = (dispatch) => {\n  return {\n    addFriend: (friend) => dispatch(addFriend(friend)),\n    isLoggedIn: (uid) => dispatch(isLoggedIn(uid))\n  };\n};\n\nexport default compose(\n    firestoreConnect(() => [\"users\"]),\n    connect(addFriendsListToProps, addDispatchtoProps)\n)(FriendsBar);\n\n// export default connect(addFriendsListToProps,addDispatchtoProps)(FriendsBar)"]},"metadata":{},"sourceType":"module"}